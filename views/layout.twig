<!DOCTYPE html>
<html>
<head>
  <title>TensorFlow.js Tutorial</title>


</head>

<body>
  {% block body %}{% endblock %}
  <!-- Import TensorFlow.js -->
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.0/dist/tf.min.js"></script>
  <!-- Import tfjs-vis -->
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis@1.0.2/dist/tfjs-vis.umd.min.js"></script>

  <!-- Import the main script file -->
  <script>
    console.log('Hello TensorFlow'); 
    async function getData() {
      const carsDataReq = await fetch('https://storage.googleapis.com/tfjs-tutorials/carsData.json');  
      const carsData = await carsDataReq.json();  
      const cleaned = carsData.map(car => ({
        mpg: car.Miles_per_Gallon,
        horsepower: car.Horsepower,
        cyl: car.Cylinders,
      }))
      .filter(car => (car.mpg != null && car.horsepower != null && car.cyl != null));
      
      return cleaned;
    } 
async function run() {
  // Load and plot the original input data that we are going to train on.
  const data = await getData();
  console.log(data)
  const values = data.map(d => ({
    x: d.horsepower,
    y: d.mpg,
    z:d.cyl
  }));

  tfvis.render.scatterplot(
    {name: 'Horsepower v MPG v cyl'},
    {values}, 
    {
      xLabel: 'Horsepower',
      yLabel: 'MPG',
      zLabel: 'cyl',
      height: 300
    }
  );

  // More code will be added below
 




const model = createModel();  
tfvis.show.modelSummary({name: 'Model Summary'}, model);
const tensorData = convertToTensor(data);
const {inputs, labels} = tensorData;
    
// Train the model  
await trainModel(model, inputs, labels);
console.log('Done Training');
}
function createModel() {
  // Create a sequential model
  const model = tf.sequential(); 
  
  // Add a single input layer
  model.add(tf.layers.dense({inputShape: [1], units: 1, useBias: true}));
  
  // Add an output layer
  model.add(tf.layers.dense({units: 1, useBias: true}));

  return model;
}
function convertToTensor(data) {
  // Wrapping these calculations in a tidy will dispose any 
  // intermediate tensors.
  
  return tf.tidy(() => {
    // Step 1. Shuffle the data    
    tf.util.shuffle(data);
    
    // Step 2. Convert data to Tensor
    const inputs = data.map(d => d.horsepower)
    const labels = data.map(d => d.mpg);
    
    const inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);
    const labelTensor = tf.tensor2d(labels, [labels.length, 1]);
    console.log(inputs)
    //Step 3. Normalize the data to the range 0 - 1 using min-max scaling
    const inputMax = inputTensor.max();
    const inputMin = inputTensor.min();  
    const labelMax = labelTensor.max();
    const labelMin = labelTensor.min();
    
    const normalizedInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));
    const normalizedLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));
    
    return {
      inputs: normalizedInputs,
      labels: normalizedLabels,
      // Return the min/max bounds so we can use them later.
      inputMax,
      inputMin,
      labelMax,
      labelMin,
    }
  });  
}
async function trainModel(model, inputs, labels) {
  // Prepare the model for training.  
  model.compile({
    optimizer: tf.train.adam(),
    loss: tf.losses.meanSquaredError,
    metrics: ['mse'],
  });
  
  const batchSize = 32;
  const epochs = 100;
  
  return await model.fit(inputs, labels, {
    batchSize,
    epochs,
    shuffle: true,
    callbacks: tfvis.show.fitCallbacks(
      { name: 'Training Performance' },
      ['loss', 'mse'], 
      { height: 200, callbacks: ['onEpochEnd'] }
    )
  });
}

document.addEventListener('DOMContentLoaded', run);
  </script>
</body>
</html>
